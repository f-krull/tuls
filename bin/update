#!/usr/bin/env bash

# update crontab

set -ETeuo pipefail

declare BASEDIR; BASEDIR="$( cd "$( dirname $0 )/.." && pwd )"


NON_INTERACTIVE=0

while getopts "y" opt; do
    case "$opt" in
    "y")
      NON_INTERACTIVE=1
      ;;
    esac
done

shift $((OPTIND-1))

services="$( 
  cd ${BASEDIR}/services 
  ls * | grep ".service$" | sed "s/.service//"
)"

for service in $services; do
  (
    TULS_BASEDIR=${BASEDIR}
    source ${BASEDIR}/services/${service}.service
    # prepare log dir
    mkdir -p ${BASEDIR}/var/log/${service}/
    # prepare status
    mkdir -p ${BASEDIR}/var/exit/${service}/
    # write parent wrapper

    # rewrite nice
    case "${NICE:0:1}" in 
      [hH] ) 
        NICE="-n 0"
        ;;
      [mM] ) 
        NICE="-n 5"
        ;;
      [lL] ) 
        NICE="-n 19"
        ;;
    esac
    # rewrite ionice
    case "${IONICE:0:1}" in 
      [hH] ) 
        IONICE="-c 2 -n 0"
        ;;
      [mM] ) 
        IONICE="-c 2 -n 4"
        ;;
      [lL] ) 
        IONICE="-c 3"
        ;;
    esac

    cat > ${BASEDIR}/var/cron/${service} << EOI
#!/usr/bin/env bash

${BASEDIR}/3rdparty/busybox/bin/nice $NICE ${BASEDIR}/3rdparty/busybox/bin/ionice $IONICE ${BASEDIR}/var/cron/${service}_child
EOI
    # write child wrapper
    cat > ${BASEDIR}/var/cron/${service}_child << EOI
#!/usr/bin/env bash


# make sure service is runing only once
pid_fn=${BASEDIR}/run/pids/${service}
started=\$( ${BASEDIR}/3rdparty/busybox/bin/date -Iseconds )

write_pid() {
  local pid=\$1
  local started=\$2
  printf "%s\t%s\n" "\$pid" "\$started" > \$pid_fn
}

is_running() {
  [ -f "\$pid_fn" ] || return 1
  pid_inf=( \$(cat \$pid_fn) )
  kill -0 \${pid_inf[0]} 2>/dev/null
}

# create run dir
if [ ! -e ${BASEDIR}/run ]; then
  mkdir -p /tmp/tuls_run_${USER}
  ln -sfn /tmp/tuls_run_${USER} ${BASEDIR}/run
  mkdir -p ${BASEDIR}/run/pids
fi
echo test running
if is_running; then
  printf "\$0: already running (\"\${pid_fn}\")\n" >&2
  exit 0
fi

write_pid \$BASHPID \$started

# cleanup on exit
trap "rm \$pid_fn" INT TERM EXIT

rm -f ${BASEDIR}/var/log/${service}/lock
${BASEDIR}/bin/rotate ${BASEDIR}/var/exit/${service}/exit_code
export TULS_BASEDIR=${BASEDIR}
export TULS_PATH=${BASEDIR}/3rdparty/busybox/bin/:${BASEDIR}/3rdparty/busybox/sbin/:${BASEDIR}/3rdparty/busybox/usr/bin/:${BASEDIR}/3rdparty/busybox/usr/sbin/
{
  {
    write_pid \$BASHPID \$started   # some subshell was created by now
    $EXECSTART
  } 2>&1
  status_code=\$?
  # write exit status
  printf "%s\t%s\n" "\$status_code" "\$started" > ${BASEDIR}/var/exit/${service}/exit_code
} | ${BASEDIR}/3rdparty/busybox/usr/sbin/svlogd -tt ${BASEDIR}/var/log/${service}/

EOI
    chmod +x ${BASEDIR}/var/cron/${service}
    chmod +x ${BASEDIR}/var/cron/${service}_child
  )
done

ct_tuls="$(
  # remove previous entries
  crontab -l | ${BASEDIR}/3rdparty/busybox/usr/bin/awk '/^#TULS_BEGIN/ {flag=1} /^#TULS_END/ {flag=0} !flag {print}' | grep -v "#TULS_END"

  printf "#TULS_BEGIN\n"
  printf "TULS_SRVDIR=${BASEDIR}/var/cron/\n"
  for service in $services; do
    (
      TULS_BASEDIR=${BASEDIR}
      source ${BASEDIR}/services/${service}.service
      echo "${TIMER} \${TULS_SRVDIR}/${service}"
    )
  done | sort
  printf "#TULS_END\n"
)"

printf "new crontab:\n"
printf -- "---------------------------------------------------\n"
echo "$ct_tuls"
printf -- "---------------------------------------------------\n\n"

if [ ${NON_INTERACTIVE} -eq 0 ]; then
  read -p "write new crontab? [y/n]? " -n 1 -r REPLY
  echo
else
  REPLY="y"
fi

if [[ $REPLY =~ ^[Yy]$ ]]; then
  echo "$ct_tuls" | crontab -
  echo "contab written"
else 
  echo "aborting"
fi
